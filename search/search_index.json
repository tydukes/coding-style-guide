{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coding Style Guide","text":"<p>Welcome \u2014 central portal for multi-language, AI-optimized coding standards.</p> <p>Use the navigation to the left to explore per-language guides, templates, and CI integration.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All releases follow semantic versioning. See tags for details.</p>"},{"location":"01_overview/governance/","title":"Governance","text":"<ul> <li>Branching: Strict GitFlow with protected branches.</li> <li>PRs: Required checks include linters, formatters, unit/integration tests, and metadata validation.</li> <li>Changes to shared rules trigger automated sync PRs to downstream guides.</li> </ul>"},{"location":"01_overview/principles/","title":"Principles","text":"<ul> <li>Strict, automatable formatting across repo with pre-commit and CI enforcement.</li> <li>AI-friendly metadata (inline comment tags) for modules and scripts.</li> <li>Monorepo / multi-repo flexibility: language-specific guides are standalone and referenced.</li> <li>Semantic versioning for the guides and changelog-driven releases.</li> </ul>"},{"location":"01_overview/structure/","title":"Structure","text":"<p>Repository layout is split per guide (multi-repo). Each guide follows the structure:</p> <pre><code>/README.md\n/docs/\n/templates/\n/scripts/\n</code></pre> <p>Examples are stored centrally under <code>/examples/</code> in the portal.</p>"},{"location":"02_language_guides/ansible/","title":"Ansible Style Guide","text":"<ul> <li>Roles in <code>roles/&lt;role_name&gt;/</code> with <code>defaults</code>, <code>vars</code>, <code>tasks</code>, <code>handlers</code>, <code>meta</code>.</li> <li>Use <code>ansible-lint</code> and <code>molecule</code> for testing.</li> </ul>"},{"location":"02_language_guides/ansible/#example-task-header","title":"Example task header","text":"<pre><code># @module: create_user\n- name: Ensure user exists\n  user:\n    name: \"{{ user_name }}\"\n</code></pre>"},{"location":"02_language_guides/bash/","title":"Bash Style Guide","text":"<ul> <li>Use set -o errexit -o nounset -o pipefail and <code>shellcheck</code>.</li> <li>Provide metadata header and <code>--help</code>.</li> </ul>"},{"location":"02_language_guides/bash/#template","title":"Template","text":"<pre><code>#!/usr/bin/env bash\n# @script: deploy-helper\nset -o errexit\nset -o nounset\nset -o pipefail\n</code></pre>"},{"location":"02_language_guides/jenkins_groovy/","title":"Jenkins / Groovy Style Guide","text":"<ul> <li>Prefer declarative pipelines, shared libraries, and consistent stage naming.</li> <li>Use strict error handling and post blocks for cleanup.</li> </ul>"},{"location":"02_language_guides/kubernetes/","title":"Kubernetes &amp; Helm Style Guide","text":"<ul> <li>Strict naming, labels, annotations; validate manifests with <code>kubeval</code>/<code>kubectl --dry-run</code>.</li> <li>Templates should be linted with <code>helm lint</code> and schema-validated.</li> </ul>"},{"location":"02_language_guides/powershell/","title":"PowerShell Style Guide","text":"<ul> <li>Follow Microsoft-approved verbs and parameter conventions.</li> <li>Enforce PSScriptAnalyzer in CI.</li> </ul>"},{"location":"02_language_guides/python/","title":"Python Style Guide","text":"<ul> <li>Strict PEP8 + type hints.</li> <li>Use <code>black</code>, <code>isort</code>, <code>flake8</code>, and <code>mypy</code> in pre-commit and CI.</li> </ul>"},{"location":"02_language_guides/python/#canonical-example","title":"Canonical example","text":"<pre><code># @module: my_module\ndef add(a: int, b: int) -&gt; int:\n    \"\"\"Add two integers.\"\"\"\n    return a + b\n</code></pre>"},{"location":"02_language_guides/sql/","title":"SQL Style Guide","text":"<ul> <li>Use lowercase keywords and snake_case identifiers (your preference).</li> <li>Include comments for complex queries and use parameterized statements.</li> </ul>"},{"location":"02_language_guides/sql/#example","title":"Example","text":"<pre><code>-- @module: user_queries\nselect id, first_name from users where active = true;\n</code></pre>"},{"location":"02_language_guides/terraform/","title":"Terraform Style Guide (with Terragrunt)","text":"<ul> <li>Use <code>snake_case</code> for variables, <code>kebab-case</code> for module directories.</li> <li>Always run <code>terraform fmt -recursive</code>, <code>tflint</code>, and <code>terraform validate</code> in CI.</li> </ul>"},{"location":"02_language_guides/terraform/#example-variable","title":"Example variable","text":"<pre><code>variable \"instance_count\" { type = number description = \"Count\" default = 2 }\n</code></pre>"},{"location":"02_language_guides/terraform/#terragrunt","title":"Terragrunt","text":"<p>See terragrunt.md for live layout and include patterns.</p>"},{"location":"02_language_guides/terragrunt/","title":"Terragrunt Style Guide","text":"<ul> <li>Use <code>live/&lt;env&gt;/&lt;region&gt;/&lt;stack&gt;/terragrunt.hcl</code> pattern.</li> <li>Centralize remote state in top-level <code>terragrunt.hcl</code>.</li> </ul>"},{"location":"02_language_guides/terragrunt/#example","title":"Example","text":"<pre><code># @module: vpc-live\ninclude { path = find_in_parent_folders() }\nterraform { source = \"git::ssh://...//modules//vpc?ref=v1.2.0\" }\ninputs = { name = \"my-vpc\" }\n</code></pre>"},{"location":"02_language_guides/typescript/","title":"TypeScript Style Guide","text":"<ul> <li>Strict ESLint + Prettier + full type safety.</li> <li>Use <code>tsconfig.json</code> with <code>strict: true</code>.</li> </ul>"},{"location":"02_language_guides/typescript/#canonical-example","title":"Canonical example","text":"<pre><code>// @module: util\nexport function sum(a: number, b: number): number { return a + b }\n</code></pre>"},{"location":"02_language_guides/yaml_json_docker/","title":"YAML, JSON, Dockerfile Style Guide","text":"<ul> <li>YAML: strict linting with <code>yamllint</code> and schema validation where applicable.</li> <li>JSON: consistent 2-space indent; optional schema validation.</li> <li>Dockerfile: multi-stage builds, pinned base images, and security scanning.</li> </ul>"},{"location":"03_metadata_schema/schema_reference/","title":"Metadata Schema Reference","text":"<p>Metadata is embedded inline as comment-based tags. Use language-appropriate comment syntax.</p> <p>Common tags:</p> <ul> <li><code>@module: &lt;name&gt;</code></li> <li><code>@vars: name,type,required; name2,type,optional,default=...</code></li> <li><code>@outputs: name,description</code></li> <li><code>@depends_on: path,to,other_module</code></li> <li><code>@env: prod|staging|dev</code></li> </ul> <p>Example (Terraform file header):</p> <pre><code># @module: vpc\n# @vars: name,string,required; cidr,string,optional,default=\"10.0.0.0/16\"\n# @outputs: vpc_id,The ID of the created VPC\n</code></pre>"},{"location":"04_templates/README_template/","title":"Module README Template","text":""},{"location":"04_templates/README_template/#purpose","title":"Purpose","text":"<p>Short description.</p>"},{"location":"04_templates/README_template/#usage","title":"Usage","text":"<pre><code>module \"example\" { source = \"git::ssh://...//modules/example?ref=v1.0.0\" }\n</code></pre>"},{"location":"04_templates/README_template/#inputs","title":"Inputs","text":"Name Type Required Default Description"},{"location":"04_templates/README_template/#outputs","title":"Outputs","text":"Name Description"},{"location":"04_templates/README_template/#examples","title":"Examples","text":"<p>Provide example usage and notes.</p>"},{"location":"05_ci_cd/ai_validation_pipeline/","title":"CI / AI Validation Pipeline","text":"<ul> <li>Steps:</li> <li>Checkout</li> <li>Run pre-commit hooks</li> <li>Run linters and formatters</li> <li>Run metadata validation script</li> <li>Run tests (unit + integration)</li> <li> <p>Terraform/Terragrunt plan (dry run) and attach plan output</p> </li> <li> <p>AI advisory bot runs in PRs commenting style suggestions (advisory only).</p> </li> </ul>"},{"location":"06_container/usage/","title":"Container Usage Guide","text":"<p>The Coding Style Guide Validator is available as a containerized tool, making it easy to integrate validation into any repository without installing dependencies locally.</p>"},{"location":"06_container/usage/#quick-start","title":"Quick Start","text":""},{"location":"06_container/usage/#basic-usage","title":"Basic Usage","text":"<pre><code># Run full validation on current directory\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n\n# Run linters only\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest lint\n\n# Format code in-place\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest format\n</code></pre>"},{"location":"06_container/usage/#available-commands","title":"Available Commands","text":""},{"location":"06_container/usage/#validate-default","title":"<code>validate</code> (default)","text":"<p>Runs all validation checks:</p> <ul> <li>Metadata validation</li> <li>Linters (Python, YAML, Shell, etc.)</li> <li>Documentation build (if <code>mkdocs.yml</code> present)</li> </ul> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#lint","title":"<code>lint</code>","text":"<p>Runs linters only without building documentation:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest lint\n</code></pre>"},{"location":"06_container/usage/#format","title":"<code>format</code>","text":"<p>Auto-formats code (Python with Black, Terraform):</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest format\n</code></pre>"},{"location":"06_container/usage/#docs","title":"<code>docs</code>","text":"<p>Builds and validates MkDocs documentation:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest docs\n</code></pre>"},{"location":"06_container/usage/#metadata","title":"<code>metadata</code>","text":"<p>Validates <code>@module</code> metadata tags:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest metadata\n</code></pre>"},{"location":"06_container/usage/#using-with-docker-compose","title":"Using with Docker Compose","text":"<p>Create a <code>docker-compose.yml</code> in your repository:</p> <pre><code>version: '3.8'\n\nservices:\n  validate:\n    image: ghcr.io/tydukes/coding-style-guide:latest\n    volumes:\n      - .:/workspace\n    command: validate\n</code></pre> <p>Then run:</p> <pre><code># Full validation\ndocker-compose run --rm validate\n\n# Or specify command\ndocker-compose run --rm validate lint\n</code></pre>"},{"location":"06_container/usage/#github-actions-integration","title":"GitHub Actions Integration","text":""},{"location":"06_container/usage/#using-the-reusable-action","title":"Using the Reusable Action","text":"<p>Add to your <code>.github/workflows/ci.yml</code>:</p> <pre><code>name: CI\n\non: [push, pull_request]\n\njobs:\n  validate-coding-standards:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate coding standards\n        uses: tydukes/coding-style-guide/.github/actions/validate@main\n        with:\n          mode: validate\n          path: .\n</code></pre>"},{"location":"06_container/usage/#action-inputs","title":"Action Inputs","text":"Input Description Default Required <code>mode</code> Validation mode: validate, lint, format, docs, metadata <code>validate</code> No <code>path</code> Path to validate <code>.</code> No <code>image</code> Container image to use <code>ghcr.io/tydukes/coding-style-guide:latest</code> No <code>strict</code> Enable strict mode <code>false</code> No <code>continue-on-error</code> Continue even if validation fails <code>false</code> No"},{"location":"06_container/usage/#using-container-directly","title":"Using Container Directly","text":"<pre><code>name: CI\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate coding standards\n        run: |\n          docker run --rm -v $PWD:/workspace \\\n            ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#cli-wrapper-script","title":"CLI Wrapper Script","text":"<p>For easier local usage, use the wrapper script:</p> <pre><code># Download wrapper script\ncurl -sSL https://raw.githubusercontent.com/tydukes/coding-style-guide/main/scripts/validate-container.sh \\\n  -o validate-style.sh &amp;&amp; chmod +x validate-style.sh\n\n# Run validation\n./validate-style.sh validate\n\n# Run with custom workspace\n./validate-style.sh lint --workspace /path/to/repo\n\n# Use local image\n./validate-style.sh validate --image coding-style-guide:local\n</code></pre>"},{"location":"06_container/usage/#wrapper-options","title":"Wrapper Options","text":"<pre><code>./validate-style.sh [COMMAND] [OPTIONS]\n\nCommands:\n  validate    Run all validation checks (default)\n  lint        Run linters only\n  format      Auto-format code\n  docs        Build and validate documentation\n  metadata    Validate @module metadata tags\n\nOptions:\n  --workspace DIR     Directory to validate (default: current directory)\n  --image IMAGE       Container image to use\n  --strict            Fail on warnings\n  --debug             Enable debug output\n</code></pre>"},{"location":"06_container/usage/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>STRICT</code> Fail on warnings <code>false</code> <code>DEBUG</code> Enable debug output <code>false</code> <code>VALIDATOR_IMAGE</code> Override container image <code>ghcr.io/tydukes/coding-style-guide:latest</code> <code>VALIDATOR_WORKSPACE</code> Override workspace path Current directory"},{"location":"06_container/usage/#pre-commit-hook-integration","title":"Pre-commit Hook Integration","text":"<p>Add to <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: local\n    hooks:\n      - id: coding-style-validator\n        name: Validate Coding Standards\n        entry: docker run --rm -v $(pwd):/workspace ghcr.io/tydukes/coding-style-guide:latest\n        args: [lint]\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"06_container/usage/#gitlab-ci-integration","title":"GitLab CI Integration","text":"<p>Add to <code>.gitlab-ci.yml</code>:</p> <pre><code>validate-coding-standards:\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker run --rm -v $CI_PROJECT_DIR:/workspace\n        ghcr.io/tydukes/coding-style-guide:latest validate\n  only:\n    - merge_requests\n    - main\n</code></pre>"},{"location":"06_container/usage/#jenkins-integration","title":"Jenkins Integration","text":"<p>Add to <code>Jenkinsfile</code>:</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Validate Coding Standards') {\n            steps {\n                script {\n                    docker.image('ghcr.io/tydukes/coding-style-guide:latest').inside {\n                        sh 'validate'\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"06_container/usage/#building-locally","title":"Building Locally","text":"<p>To build and test locally:</p> <pre><code># Build image\ndocker build -t coding-style-guide:local .\n\n# Test with docker-compose\ndocker-compose run --rm validator\n\n# Or run directly\ndocker run --rm -v $(pwd):/workspace coding-style-guide:local validate\n</code></pre>"},{"location":"06_container/usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"06_container/usage/#permission-issues","title":"Permission Issues","text":"<p>If you encounter permission issues with mounted volumes:</p> <pre><code># Run as current user\ndocker run --rm -v $(pwd):/workspace \\\n  --user $(id -u):$(id -g) \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#missing-files","title":"Missing Files","text":"<p>Ensure your repository is properly mounted:</p> <pre><code># Verify mount\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest ls -la /workspace\n</code></pre>"},{"location":"06_container/usage/#debug-mode","title":"Debug Mode","text":"<p>Enable debug output:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  -e DEBUG=true \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#image-tags","title":"Image Tags","text":"<ul> <li><code>latest</code> - Latest stable release from main branch</li> <li><code>v1.0.0</code> - Specific version tags</li> <li><code>v1.0</code> - Major.minor tags</li> <li><code>v1</code> - Major version tags</li> <li><code>main</code> - Latest commit on main branch</li> </ul>"},{"location":"06_container/usage/#support","title":"Support","text":"<p>For issues or questions:</p> <ul> <li>GitHub Issues: https://github.com/tydukes/coding-style-guide/issues</li> <li>Documentation: https://tydukes.github.io/coding-style-guide/</li> </ul>"}]}