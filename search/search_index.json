{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Dukes Engineering Style Guide","text":"<p>Version: 1.0.0 Maintainer: Tyler Dukes License: MIT Last Updated: 2025-10-27</p>"},{"location":"#introduction","title":"Introduction","text":"<p>The Dukes Engineering Style Guide defines a unified, opinionated standard for writing infrastructure and application code that is both human-readable and AI-optimized. It is designed to create consistency across Terraform, Terragrunt, Ansible, Kubernetes, Bash, and Python ecosystems \u2014 enabling reproducible automation and long-term maintainability.</p> <p>This guide reflects practical standards derived from real-world DevOps, SRE, and automation practices. Its intent is to strike the right balance between flexibility and rigor \u2014 allowing engineers to focus on building systems instead of debating style.</p>"},{"location":"#core-principles","title":"Core Principles","text":"<ol> <li> <p>Clarity First:    Code must communicate intent before it executes logic.    Readability and maintainability take precedence over brevity.</p> </li> <li> <p>Automation by Default:    Everything that can be automated \u2014 linting, formatting, testing, and deployment \u2014 is automated.</p> </li> <li> <p>Security and Stability:    Secrets are always managed securely, dependencies are pinned, and environments are deterministic.</p> </li> <li> <p>Reproducibility:    Builds, tests, and deployments must produce consistent outcomes across local, CI, and production environments.</p> </li> <li> <p>Human + AI Collaboration:    Every standard is designed for dual readability \u2014 equally interpretable by developers and AI assistants.</p> </li> </ol>"},{"location":"#scope","title":"Scope","text":"<p>This guide provides style and structure conventions for the following domains:</p> <ul> <li>Infrastructure as Code (IaC): Terraform with Terragrunt, Ansible, Kubernetes YAMLs</li> <li>Scripting: Bash and PowerShell</li> <li>Application Code: Python, Node.js, TypeScript, Go, Groovy</li> <li>Pipelines: Declarative Jenkins, CI/CD YAML, GitHub Actions</li> <li>Data and Querying: SQL and related database scripts</li> </ul> <p>Each section defines:</p> <ul> <li>Standardized formatting rules</li> <li>Naming conventions</li> <li>Directory and module structure</li> <li>Security and secret management practices</li> <li>Documentation expectations</li> <li>AI-annotation standards (metadata blocks and comment schemas)</li> </ul>"},{"location":"#document-structure","title":"Document Structure","text":"Section Description 1. Foundations Global principles, file structure, documentation format 2. Language Guides Specific rules for Python, Bash, Terraform, and others 3. Automation &amp; Testing Pre-commit, linting, CI/CD, and test orchestration 4. AI Metadata Comment schemas, structured annotations, and promptable code 5. Templates &amp; Samples Example repositories, starter modules, and CI workflows <p>Each section is modular and self-contained, allowing this guide to evolve alongside your toolchain.</p>"},{"location":"#how-to-use-this-guide","title":"How to Use This Guide","text":"<ul> <li>For human readers, this guide acts as a living documentation of your engineering standards.</li> <li>For AI models, embedded metadata blocks and clear structure enable code generation, refactoring,   and auditing with minimal ambiguity.</li> </ul> <p>You can contribute to this repository using standard Git workflows:</p> <p>```bash git clone https://github.com/tydukes/coding-style-guide.git cd coding-style-guide</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All releases follow semantic versioning. See tags for details.</p>"},{"location":"01_overview/governance/","title":"Governance","text":"<ul> <li>Branching: Strict GitFlow with protected branches.</li> <li>PRs: Required checks include linters, formatters, unit/integration tests, and metadata validation.</li> <li>Changes to shared rules trigger automated sync PRs to downstream guides.</li> </ul>"},{"location":"01_overview/principles/","title":"Principles","text":"<ul> <li>Strict, automatable formatting across repo with pre-commit and CI enforcement.</li> <li>AI-friendly metadata (inline comment tags) for modules and scripts.</li> <li>Monorepo / multi-repo flexibility: language-specific guides are standalone and referenced.</li> <li>Semantic versioning for the guides and changelog-driven releases.</li> </ul>"},{"location":"01_overview/structure/","title":"Structure","text":"<p>Repository layout is split per guide (multi-repo). Each guide follows the structure:</p> <pre><code>/README.md\n/docs/\n/templates/\n/scripts/\n</code></pre> <p>Examples are stored centrally under <code>/examples/</code> in the portal.</p>"},{"location":"02_language_guides/ansible/","title":"Ansible Style Guide","text":"<ul> <li>Roles in <code>roles/&lt;role_name&gt;/</code> with <code>defaults</code>, <code>vars</code>, <code>tasks</code>, <code>handlers</code>, <code>meta</code>.</li> <li>Use <code>ansible-lint</code> and <code>molecule</code> for testing.</li> </ul>"},{"location":"02_language_guides/ansible/#example-task-header","title":"Example task header","text":"<pre><code># @module: create_user\n- name: Ensure user exists\n  user:\n    name: \"{{ user_name }}\"\n</code></pre>"},{"location":"02_language_guides/bash/","title":"Bash Style Guide","text":"<ul> <li>Use set -o errexit -o nounset -o pipefail and <code>shellcheck</code>.</li> <li>Provide metadata header and <code>--help</code>.</li> </ul>"},{"location":"02_language_guides/bash/#template","title":"Template","text":"<pre><code>#!/usr/bin/env bash\n# @script: deploy-helper\nset -o errexit\nset -o nounset\nset -o pipefail\n</code></pre>"},{"location":"02_language_guides/jenkins_groovy/","title":"Jenkins / Groovy Style Guide","text":"<ul> <li>Prefer declarative pipelines, shared libraries, and consistent stage naming.</li> <li>Use strict error handling and post blocks for cleanup.</li> </ul>"},{"location":"02_language_guides/kubernetes/","title":"Kubernetes &amp; Helm Style Guide","text":"<ul> <li>Strict naming, labels, annotations; validate manifests with <code>kubeval</code>/<code>kubectl --dry-run</code>.</li> <li>Templates should be linted with <code>helm lint</code> and schema-validated.</li> </ul>"},{"location":"02_language_guides/powershell/","title":"PowerShell Style Guide","text":"<ul> <li>Follow Microsoft-approved verbs and parameter conventions.</li> <li>Enforce PSScriptAnalyzer in CI.</li> </ul>"},{"location":"02_language_guides/python/","title":"Python Style Guide","text":"<ul> <li>Strict PEP8 + type hints.</li> <li>Use <code>black</code>, <code>isort</code>, <code>flake8</code>, and <code>mypy</code> in pre-commit and CI.</li> </ul>"},{"location":"02_language_guides/python/#canonical-example","title":"Canonical example","text":"<pre><code># @module: my_module\ndef add(a: int, b: int) -&gt; int:\n    \"\"\"Add two integers.\"\"\"\n    return a + b\n</code></pre>"},{"location":"02_language_guides/sql/","title":"SQL Style Guide","text":"<ul> <li>Use lowercase keywords and snake_case identifiers (your preference).</li> <li>Include comments for complex queries and use parameterized statements.</li> </ul>"},{"location":"02_language_guides/sql/#example","title":"Example","text":"<pre><code>-- @module: user_queries\nselect id, first_name from users where active = true;\n</code></pre>"},{"location":"02_language_guides/terraform/","title":"Terraform Style Guide (with Terragrunt)","text":"<ul> <li>Use <code>snake_case</code> for variables, <code>kebab-case</code> for module directories.</li> <li>Always run <code>terraform fmt -recursive</code>, <code>tflint</code>, and <code>terraform validate</code> in CI.</li> </ul>"},{"location":"02_language_guides/terraform/#example-variable","title":"Example variable","text":"<pre><code>variable \"instance_count\" { type = number description = \"Count\" default = 2 }\n</code></pre>"},{"location":"02_language_guides/terraform/#terragrunt","title":"Terragrunt","text":"<p>See terragrunt.md for live layout and include patterns.</p>"},{"location":"02_language_guides/terragrunt/","title":"Terragrunt Style Guide","text":"<ul> <li>Use <code>live/&lt;env&gt;/&lt;region&gt;/&lt;stack&gt;/terragrunt.hcl</code> pattern.</li> <li>Centralize remote state in top-level <code>terragrunt.hcl</code>.</li> </ul>"},{"location":"02_language_guides/terragrunt/#example","title":"Example","text":"<pre><code># @module: vpc-live\ninclude { path = find_in_parent_folders() }\nterraform { source = \"git::ssh://...//modules//vpc?ref=v1.2.0\" }\ninputs = { name = \"my-vpc\" }\n</code></pre>"},{"location":"02_language_guides/typescript/","title":"TypeScript Style Guide","text":"<ul> <li>Strict ESLint + Prettier + full type safety.</li> <li>Use <code>tsconfig.json</code> with <code>strict: true</code>.</li> </ul>"},{"location":"02_language_guides/typescript/#canonical-example","title":"Canonical example","text":"<pre><code>// @module: util\nexport function sum(a: number, b: number): number { return a + b }\n</code></pre>"},{"location":"02_language_guides/yaml_json_docker/","title":"YAML, JSON, Dockerfile Style Guide","text":"<ul> <li>YAML: strict linting with <code>yamllint</code> and schema validation where applicable.</li> <li>JSON: consistent 2-space indent; optional schema validation.</li> <li>Dockerfile: multi-stage builds, pinned base images, and security scanning.</li> </ul>"},{"location":"03_metadata_schema/schema_reference/","title":"Metadata Schema Reference","text":"<p>Metadata is embedded inline as comment-based tags. Use language-appropriate comment syntax.</p> <p>Common tags:</p> <ul> <li><code>@module: &lt;name&gt;</code></li> <li><code>@vars: name,type,required; name2,type,optional,default=...</code></li> <li><code>@outputs: name,description</code></li> <li><code>@depends_on: path,to,other_module</code></li> <li><code>@env: prod|staging|dev</code></li> </ul> <p>Example (Terraform file header):</p> <pre><code># @module: vpc\n# @vars: name,string,required; cidr,string,optional,default=\"10.0.0.0/16\"\n# @outputs: vpc_id,The ID of the created VPC\n</code></pre>"},{"location":"04_templates/README_template/","title":"Module README Template","text":""},{"location":"04_templates/README_template/#purpose","title":"Purpose","text":"<p>Short description.</p>"},{"location":"04_templates/README_template/#usage","title":"Usage","text":"<pre><code>module \"example\" { source = \"git::ssh://...//modules/example?ref=v1.0.0\" }\n</code></pre>"},{"location":"04_templates/README_template/#inputs","title":"Inputs","text":"Name Type Required Default Description"},{"location":"04_templates/README_template/#outputs","title":"Outputs","text":"Name Description"},{"location":"04_templates/README_template/#examples","title":"Examples","text":"<p>Provide example usage and notes.</p>"},{"location":"05_ci_cd/ai_validation_pipeline/","title":"CI / AI Validation Pipeline","text":"<ul> <li>Steps:</li> <li>Checkout</li> <li>Run pre-commit hooks</li> <li>Run linters and formatters</li> <li>Run metadata validation script</li> <li>Run tests (unit + integration)</li> <li> <p>Terraform/Terragrunt plan (dry run) and attach plan output</p> </li> <li> <p>AI advisory bot runs in PRs commenting style suggestions (advisory only).</p> </li> </ul>"},{"location":"06_container/usage/","title":"Container Usage Guide","text":"<p>The Coding Style Guide Validator is available as a containerized tool, making it easy to integrate validation into any repository without installing dependencies locally.</p>"},{"location":"06_container/usage/#quick-start","title":"Quick Start","text":""},{"location":"06_container/usage/#basic-usage","title":"Basic Usage","text":"<pre><code># Run full validation on current directory\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n\n# Run linters only\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest lint\n\n# Format code in-place\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest format\n</code></pre>"},{"location":"06_container/usage/#available-commands","title":"Available Commands","text":""},{"location":"06_container/usage/#validate-default","title":"<code>validate</code> (default)","text":"<p>Runs all validation checks:</p> <ul> <li>Metadata validation</li> <li>Linters (Python, YAML, Shell, etc.)</li> <li>Documentation build (if <code>mkdocs.yml</code> present)</li> </ul> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#lint","title":"<code>lint</code>","text":"<p>Runs linters only without building documentation:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest lint\n</code></pre>"},{"location":"06_container/usage/#format","title":"<code>format</code>","text":"<p>Auto-formats code (Python with Black, Terraform):</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest format\n</code></pre>"},{"location":"06_container/usage/#docs","title":"<code>docs</code>","text":"<p>Builds and validates MkDocs documentation:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest docs\n</code></pre>"},{"location":"06_container/usage/#metadata","title":"<code>metadata</code>","text":"<p>Validates <code>@module</code> metadata tags:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest metadata\n</code></pre>"},{"location":"06_container/usage/#using-with-docker-compose","title":"Using with Docker Compose","text":"<p>Create a <code>docker-compose.yml</code> in your repository:</p> <pre><code>version: '3.8'\n\nservices:\n  validate:\n    image: ghcr.io/tydukes/coding-style-guide:latest\n    volumes:\n      - .:/workspace\n    command: validate\n</code></pre> <p>Then run:</p> <pre><code># Full validation\ndocker-compose run --rm validate\n\n# Or specify command\ndocker-compose run --rm validate lint\n</code></pre>"},{"location":"06_container/usage/#github-actions-integration","title":"GitHub Actions Integration","text":""},{"location":"06_container/usage/#using-the-reusable-action","title":"Using the Reusable Action","text":"<p>Add to your <code>.github/workflows/ci.yml</code>:</p> <pre><code>name: CI\n\non: [push, pull_request]\n\njobs:\n  validate-coding-standards:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate coding standards\n        uses: tydukes/coding-style-guide/.github/actions/validate@main\n        with:\n          mode: validate\n          path: .\n</code></pre>"},{"location":"06_container/usage/#action-inputs","title":"Action Inputs","text":"Input Description Default Required <code>mode</code> Validation mode: validate, lint, format, docs, metadata <code>validate</code> No <code>path</code> Path to validate <code>.</code> No <code>image</code> Container image to use <code>ghcr.io/tydukes/coding-style-guide:latest</code> No <code>strict</code> Enable strict mode <code>false</code> No <code>continue-on-error</code> Continue even if validation fails <code>false</code> No"},{"location":"06_container/usage/#using-container-directly","title":"Using Container Directly","text":"<pre><code>name: CI\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate coding standards\n        run: |\n          docker run --rm -v $PWD:/workspace \\\n            ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#cli-wrapper-script","title":"CLI Wrapper Script","text":"<p>For easier local usage, use the wrapper script:</p> <pre><code># Download wrapper script\ncurl -sSL https://raw.githubusercontent.com/tydukes/coding-style-guide/main/scripts/validate-container.sh \\\n  -o validate-style.sh &amp;&amp; chmod +x validate-style.sh\n\n# Run validation\n./validate-style.sh validate\n\n# Run with custom workspace\n./validate-style.sh lint --workspace /path/to/repo\n\n# Use local image\n./validate-style.sh validate --image coding-style-guide:local\n</code></pre>"},{"location":"06_container/usage/#wrapper-options","title":"Wrapper Options","text":"<pre><code>./validate-style.sh [COMMAND] [OPTIONS]\n\nCommands:\n  validate    Run all validation checks (default)\n  lint        Run linters only\n  format      Auto-format code\n  docs        Build and validate documentation\n  metadata    Validate @module metadata tags\n\nOptions:\n  --workspace DIR     Directory to validate (default: current directory)\n  --image IMAGE       Container image to use\n  --strict            Fail on warnings\n  --debug             Enable debug output\n</code></pre>"},{"location":"06_container/usage/#environment-variables","title":"Environment Variables","text":"Variable Description Default <code>STRICT</code> Fail on warnings <code>false</code> <code>DEBUG</code> Enable debug output <code>false</code> <code>VALIDATOR_IMAGE</code> Override container image <code>ghcr.io/tydukes/coding-style-guide:latest</code> <code>VALIDATOR_WORKSPACE</code> Override workspace path Current directory"},{"location":"06_container/usage/#pre-commit-hook-integration","title":"Pre-commit Hook Integration","text":"<p>Add to <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n  - repo: local\n    hooks:\n      - id: coding-style-validator\n        name: Validate Coding Standards\n        entry: docker run --rm -v $(pwd):/workspace ghcr.io/tydukes/coding-style-guide:latest\n        args: [lint]\n        language: system\n        pass_filenames: false\n        always_run: true\n</code></pre>"},{"location":"06_container/usage/#gitlab-ci-integration","title":"GitLab CI Integration","text":"<p>Add to <code>.gitlab-ci.yml</code>:</p> <pre><code>validate-coding-standards:\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker run --rm -v $CI_PROJECT_DIR:/workspace\n        ghcr.io/tydukes/coding-style-guide:latest validate\n  only:\n    - merge_requests\n    - main\n</code></pre>"},{"location":"06_container/usage/#jenkins-integration","title":"Jenkins Integration","text":"<p>Add to <code>Jenkinsfile</code>:</p> <pre><code>pipeline {\n    agent any\n\n    stages {\n        stage('Validate Coding Standards') {\n            steps {\n                script {\n                    docker.image('ghcr.io/tydukes/coding-style-guide:latest').inside {\n                        sh 'validate'\n                    }\n                }\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"06_container/usage/#building-locally","title":"Building Locally","text":"<p>To build and test locally:</p> <pre><code># Build image\ndocker build -t coding-style-guide:local .\n\n# Test with docker-compose\ndocker-compose run --rm validator\n\n# Or run directly\ndocker run --rm -v $(pwd):/workspace coding-style-guide:local validate\n</code></pre>"},{"location":"06_container/usage/#troubleshooting","title":"Troubleshooting","text":""},{"location":"06_container/usage/#permission-issues","title":"Permission Issues","text":"<p>If you encounter permission issues with mounted volumes:</p> <pre><code># Run as current user\ndocker run --rm -v $(pwd):/workspace \\\n  --user $(id -u):$(id -g) \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#missing-files","title":"Missing Files","text":"<p>Ensure your repository is properly mounted:</p> <pre><code># Verify mount\ndocker run --rm -v $(pwd):/workspace \\\n  ghcr.io/tydukes/coding-style-guide:latest ls -la /workspace\n</code></pre>"},{"location":"06_container/usage/#debug-mode","title":"Debug Mode","text":"<p>Enable debug output:</p> <pre><code>docker run --rm -v $(pwd):/workspace \\\n  -e DEBUG=true \\\n  ghcr.io/tydukes/coding-style-guide:latest validate\n</code></pre>"},{"location":"06_container/usage/#image-tags","title":"Image Tags","text":"<ul> <li><code>latest</code> - Latest stable release from main branch</li> <li><code>v1.0.0</code> - Specific version tags</li> <li><code>v1.0</code> - Major.minor tags</li> <li><code>v1</code> - Major version tags</li> <li><code>main</code> - Latest commit on main branch</li> </ul>"},{"location":"06_container/usage/#support","title":"Support","text":"<p>For issues or questions:</p> <ul> <li>GitHub Issues: https://github.com/tydukes/coding-style-guide/issues</li> <li>Documentation: https://tydukes.github.io/coding-style-guide/</li> </ul>"},{"location":"07_integration/integration_prompt/","title":"Integration Prompt for Other Repositories","text":"<p>Use this prompt to quickly integrate the coding style guide validator into any codebase.</p>"},{"location":"07_integration/integration_prompt/#copy-paste-prompt-for-claude-code","title":"Copy-Paste Prompt for Claude Code","text":"<pre><code>I need to integrate the coding style guide validator into this repository. The validator is\navailable as a containerized tool that can be used via GitHub Actions, locally with Docker,\nor through a Makefile.\n\nPlease implement the following:\n\n## 1. GitHub Actions Integration (Recommended)\n\nCreate \\`.github/workflows/validate-coding-standards.yml\\` with:\n\n\\`\\`\\`yaml\nname: Validate Coding Standards\n\n\"on\":\n  push:\n    branches: [main, develop]\n  pull_request:\n    branches: [main]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Validate coding standards\n        uses: tydukes/coding-style-guide/.github/actions/validate@v1.0.0\n        with:\n          mode: validate\n          path: .\n\\`\\`\\`\n\n## 2. Local Development Support\n\n### Option A: Create a Makefile\n\nAdd these targets to the repository \\`Makefile\\` (or create one):\n\n\\`\\`\\`makefile\n# Coding style validation targets\n.PHONY: validate lint format validate-docs\n\nIMAGE ?= ghcr.io/tydukes/coding-style-guide:v1.0.0\n\nvalidate: ## Run full coding standards validation\n @docker run --rm -v $$(pwd):/workspace $(IMAGE) validate\n\nlint: ## Run linters only\n @docker run --rm -v $$(pwd):/workspace $(IMAGE) lint\n\nformat: ## Auto-format code\n @docker run --rm -v $$(pwd):/workspace $(IMAGE) format\n\nvalidate-docs: ## Validate documentation (if mkdocs.yml exists)\n @docker run --rm -v $$(pwd):/workspace $(IMAGE) docs\n\\`\\`\\`\n\n### Option B: Create a Shell Script\n\nCreate \\`scripts/validate.sh\\`:\n\n\\`\\`\\`bash\n#!/usr/bin/env bash\n# Validate coding standards using containerized validator\n\nset -euo pipefail\n\nIMAGE=\"${VALIDATOR_IMAGE:-ghcr.io/tydukes/coding-style-guide:v1.0.0}\"\nCOMMAND=\"${1:-validate}\"\n\ndocker run --rm -v \"$(pwd):/workspace\" \"${IMAGE}\" \"${COMMAND}\"\n\\`\\`\\`\n\nMake it executable: \\`chmod +x scripts/validate.sh\\`\n\n## 3. Pre-commit Hook (Optional)\n\nIf the repository uses pre-commit, add to \\`.pre-commit-config.yaml\\`:\n\n\\`\\`\\`yaml\nrepos:\n  - repo: local\n    hooks:\n      - id: coding-style-validator\n        name: Validate Coding Standards\n        entry: docker run --rm -v $(pwd):/workspace ghcr.io/tydukes/coding-style-guide:v1.0.0\n        args: [lint]\n        language: system\n        pass_filenames: false\n        always_run: true\n\\`\\`\\`\n\n## 4. Documentation\n\nUpdate the repository README.md with a \"Code Quality\" section:\n\n\\`\\`\\`markdown\n## Code Quality\n\nThis repository uses the [Coding Style Guide](https://github.com/tydukes/coding-style-guide)\nvalidator to ensure consistent code quality.\n\n### Running Validation Locally\n\nUsing Docker:\n\\`\\`\\`bash\ndocker run --rm -v $(pwd):/workspace ghcr.io/tydukes/coding-style-guide:v1.0.0 validate\n\\`\\`\\`\n\nUsing Makefile:\n\\`\\`\\`bash\nmake validate  # Full validation\nmake lint      # Linters only\nmake format    # Auto-format\n\\`\\`\\`\n\nUsing shell script:\n\\`\\`\\`bash\n./scripts/validate.sh validate\n\\`\\`\\`\n\n### Available Commands\n\n- \\`validate\\` - Run all checks (linting, docs, metadata)\n- \\`lint\\` - Run linters only\n- \\`format\\` - Auto-format code\n- \\`docs\\` - Validate documentation (if mkdocs.yml present)\n- \\`metadata\\` - Check @module metadata tags\n\\`\\`\\`\n\n## 5. GitLab CI (If Applicable)\n\nIf this is a GitLab repository, create/update \\`.gitlab-ci.yml\\`:\n\n\\`\\`\\`yaml\nstages:\n  - validate\n\nvalidate-coding-standards:\n  stage: validate\n  image: docker:latest\n  services:\n    - docker:dind\n  script:\n    - docker run --rm -v $CI_PROJECT_DIR:/workspace\n        ghcr.io/tydukes/coding-style-guide:v1.0.0 validate\n  only:\n    - merge_requests\n    - main\n    - develop\n\\`\\`\\`\n\n## Requirements\n\n- Ensure Docker is available for local development\n- For GitHub Actions, no additional setup needed\n- For GitLab CI, Docker-in-Docker (dind) service required\n\n## Implementation Instructions\n\n1. Create the GitHub Actions workflow file\n2. Choose ONE of the local development options (Makefile OR shell script)\n3. Update the README with code quality section\n4. (Optional) Add pre-commit hook if the repo uses pre-commit\n5. Test locally: \\`make validate\\` or \\`./scripts/validate.sh\\`\n6. Commit and push to trigger CI validation\n\nPlease implement all applicable options based on the repository structure and platform.\n\\`\\`\\`\n\n---\n\n## Alternative: Minimal Integration Prompt\n\nIf you only want GitHub Actions integration:\n\n```markdown\nAdd coding style validation to this repository using the containerized validator.\n\nCreate \\`.github/workflows/validate-coding-standards.yml\\`:\n\n\\`\\`\\`yaml\nname: Validate Coding Standards\n\n\"on\":\n  push:\n    branches: [main, develop]\n  pull_request:\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: tydukes/coding-style-guide/.github/actions/validate@v1.0.0\n        with:\n          mode: validate\n\\`\\`\\`\n\nAdd a Makefile with validation targets:\n\n\\`\\`\\`makefile\n.PHONY: validate lint format\n\nIMAGE ?= ghcr.io/tydukes/coding-style-guide:v1.0.0\n\nvalidate:\n @docker run --rm -v $$(pwd):/workspace $(IMAGE) validate\n\nlint:\n @docker run --rm -v $$(pwd):/workspace $(IMAGE) lint\n\nformat:\n @docker run --rm -v $$(pwd):/workspace $(IMAGE) format\n\\`\\`\\`\n\nUpdate README.md to document the validation process.\n\nTest locally with: \\`make validate\\`\n\\`\\`\\`\n\n---\n\n## Platform-Specific Prompts\n\n### For GitHub Repositories\n\n```markdown\nIntegrate the coding style guide validator into this GitHub repository:\n\n1. Add GitHub Actions workflow at \\`.github/workflows/validate-coding-standards.yml\\`\n   - Use the reusable action: \\`tydukes/coding-style-guide/.github/actions/validate@v1.0.0\\`\n   - Trigger on push to main/develop and all pull requests\n   - Use validation mode: \\`validate\\`\n\n2. Add Makefile targets for local validation:\n   - \\`make validate\\` - full validation\n   - \\`make lint\\` - linters only\n   - \\`make format\\` - auto-format code\n\n3. Update README.md with instructions on running validation locally\n\n4. Ensure the workflow is configured to run as a required status check (mention this in PR)\n\nUse container: \\`ghcr.io/tydukes/coding-style-guide:v1.0.0\\`\n\\`\\`\\`\n\n### For GitLab Repositories\n\n```markdown\nIntegrate the coding style guide validator into this GitLab repository:\n\n1. Add validation job to \\`.gitlab-ci.yml\\`:\n   - Stage: validate\n   - Use Docker-in-Docker\n   - Run: \\`docker run --rm -v $CI_PROJECT_DIR:/workspace ghcr.io/tydukes/coding-style-guide:v1.0.0 validate\\`\n   - Trigger on: merge_requests, main, develop\n\n2. Create local validation script at \\`scripts/validate.sh\\`\n   - Make it executable\n   - Use container: \\`ghcr.io/tydukes/coding-style-guide:v1.0.0\\`\n\n3. Update README.md with validation instructions\n\n4. Add Makefile with validation targets (optional)\n\\`\\`\\`\n\n### For Local/Team Development\n\n```markdown\nSet up coding style validation for local development:\n\n1. Create \\`Makefile\\` with these targets:\n   - validate, lint, format, validate-docs\n   - Use container: \\`ghcr.io/tydukes/coding-style-guide:v1.0.0\\`\n\n2. Create \\`scripts/validate.sh\\` wrapper script\n   - Accept command as first argument (validate, lint, format)\n   - Use docker volume mount to current directory\n\n3. Add pre-commit hook configuration (if .pre-commit-config.yaml exists)\n\n4. Create \\`CONTRIBUTING.md\\` with instructions:\n   - How to run validation before committing\n   - Available validation commands\n   - How to auto-format code\n\n5. Update main README.md with \"Code Quality\" section\n\\`\\`\\`\n\n---\n\n## Customization Options\n\nYou can customize the integration by modifying the prompt:\n\n### Different Validation Modes\n\nReplace \\`mode: validate\\` with:\n\n- \\`mode: lint\\` - Only run linters (faster, no docs build)\n- \\`mode: format\\` - Auto-format code\n- \\`mode: docs\\` - Only validate documentation\n- \\`mode: metadata\\` - Only check metadata tags\n\n### Specific Container Version\n\nReplace \\`v1.0.0\\` with:\n\n- \\`latest\\` - Always use latest version (may break)\n- \\`v1.0.0\\` - Pin to specific version (recommended)\n- \\`main\\` - Use latest main branch build\n\n### Additional Configuration\n\nAdd to the GitHub Action:\n\n```yaml\n- uses: tydukes/coding-style-guide/.github/actions/validate@v1.0.0\n  with:\n    mode: validate\n    path: .\n    strict: true              # Fail on warnings\n    continue-on-error: false  # Don't continue if validation fails\n</code></pre>"},{"location":"07_integration/integration_prompt/#complete-example-integration","title":"Complete Example Integration","text":"<p>Here's a complete prompt for full integration:</p> <p>```markdown Integrate the tydukes/coding-style-guide validator into this repository with the following:</p>"},{"location":"07_integration/integration_prompt/#github-actions","title":"GitHub Actions","text":"<p>Create `.github/workflows/validate-coding-standards.yml` that: - Triggers on push to main/develop and all PRs - Uses the reusable action: `tydukes/coding-style-guide/.github/actions/validate@v1.0.0` - Runs in validation mode - Should be a required check for PRs</p>"},{"location":"07_integration/integration_prompt/#local-development","title":"Local Development","text":"<p>Add a `Makefile` with these targets: - `make validate` - Full validation - `make lint` - Linters only - `make format` - Auto-format code - `make help` - Show available targets</p> <p>All targets should use: `ghcr.io/tydukes/coding-style-guide:v1.0.0`</p>"},{"location":"07_integration/integration_prompt/#documentation","title":"Documentation","text":"<p>Update `README.md` with a new \"Code Quality\" section that explains: - How to run validation locally - Available make commands - Link to the coding style guide documentation: https://tydukes.github.io/coding-style-guide/</p>"},{"location":"07_integration/integration_prompt/#optional-enhancements","title":"Optional Enhancements","text":"<p>If this repo has: - `.pre-commit-config.yaml` - Add validator hook - `.gitlab-ci.yml` - Add validation job - `CONTRIBUTING.md` - Add validation instructions</p> <p>Container: `ghcr.io/tydukes/coding-style-guide:v1.0.0` Documentation: https://tydukes.github.io/coding-style-guide/</p> <p>Please implement all applicable options based on the repository structure. ```</p>"},{"location":"07_integration/integration_prompt/#quick-reference","title":"Quick Reference","text":"<p>Container Image: <code>ghcr.io/tydukes/coding-style-guide:v1.0.0</code></p> <p>GitHub Action: <code>tydukes/coding-style-guide/.github/actions/validate@v1.0.0</code></p> <p>Documentation: https://tydukes.github.io/coding-style-guide/</p> <p>Commands: <code>validate</code>, <code>lint</code>, <code>format</code>, <code>docs</code>, <code>metadata</code></p> <p>Repository: https://github.com/tydukes/coding-style-guide</p>"}]}