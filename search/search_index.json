{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Coding Style Guide","text":"<p>Welcome \u2014 central portal for multi-language, AI-optimized coding standards.</p> <p>Use the navigation to the left to explore per-language guides, templates, and CI integration.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All releases follow semantic versioning. See tags for details.</p>"},{"location":"01_overview/governance/","title":"Governance","text":"<ul> <li>Branching: Strict GitFlow with protected branches.</li> <li>PRs: Required checks include linters, formatters, unit/integration tests, and metadata validation.</li> <li>Changes to shared rules trigger automated sync PRs to downstream guides.</li> </ul>"},{"location":"01_overview/principles/","title":"Principles","text":"<ul> <li>Strict, automatable formatting across repo with pre-commit and CI enforcement.</li> <li>AI-friendly metadata (inline comment tags) for modules and scripts.</li> <li>Monorepo / multi-repo flexibility: language-specific guides are standalone and referenced.</li> <li>Semantic versioning for the guides and changelog-driven releases.</li> </ul>"},{"location":"01_overview/structure/","title":"Structure","text":"<p>Repository layout is split per guide (multi-repo). Each guide follows the structure:</p> <pre><code>/README.md\n/docs/\n/templates/\n/scripts/\n</code></pre> <p>Examples are stored centrally under <code>/examples/</code> in the portal.</p>"},{"location":"02_language_guides/ansible/","title":"Ansible Style Guide","text":"<ul> <li>Roles in <code>roles/&lt;role_name&gt;/</code> with <code>defaults</code>, <code>vars</code>, <code>tasks</code>, <code>handlers</code>, <code>meta</code>.</li> <li>Use <code>ansible-lint</code> and <code>molecule</code> for testing.</li> </ul>"},{"location":"02_language_guides/ansible/#example-task-header","title":"Example task header","text":"<pre><code># @module: create_user\n- name: Ensure user exists\n  user:\n    name: \"{{ user_name }}\"\n</code></pre>"},{"location":"02_language_guides/bash/","title":"Bash Style Guide","text":"<ul> <li>Use set -o errexit -o nounset -o pipefail and <code>shellcheck</code>.</li> <li>Provide metadata header and <code>--help</code>.</li> </ul>"},{"location":"02_language_guides/bash/#template","title":"Template","text":"<pre><code>#!/usr/bin/env bash\n# @script: deploy-helper\nset -o errexit\nset -o nounset\nset -o pipefail\n</code></pre>"},{"location":"02_language_guides/jenkins_groovy/","title":"Jenkins / Groovy Style Guide","text":"<ul> <li>Prefer declarative pipelines, shared libraries, and consistent stage naming.</li> <li>Use strict error handling and post blocks for cleanup.</li> </ul>"},{"location":"02_language_guides/kubernetes/","title":"Kubernetes &amp; Helm Style Guide","text":"<ul> <li>Strict naming, labels, annotations; validate manifests with <code>kubeval</code>/<code>kubectl --dry-run</code>.</li> <li>Templates should be linted with <code>helm lint</code> and schema-validated.</li> </ul>"},{"location":"02_language_guides/powershell/","title":"PowerShell Style Guide","text":"<ul> <li>Follow Microsoft-approved verbs and parameter conventions.</li> <li>Enforce PSScriptAnalyzer in CI.</li> </ul>"},{"location":"02_language_guides/python/","title":"Python Style Guide","text":"<ul> <li>Strict PEP8 + type hints.</li> <li>Use <code>black</code>, <code>isort</code>, <code>flake8</code>, and <code>mypy</code> in pre-commit and CI.</li> </ul>"},{"location":"02_language_guides/python/#canonical-example","title":"Canonical example","text":"<pre><code># @module: my_module\ndef add(a: int, b: int) -&gt; int:\n    \"\"\"Add two integers.\"\"\"\n    return a + b\n</code></pre>"},{"location":"02_language_guides/sql/","title":"SQL Style Guide","text":"<ul> <li>Use lowercase keywords and snake_case identifiers (your preference).</li> <li>Include comments for complex queries and use parameterized statements.</li> </ul>"},{"location":"02_language_guides/sql/#example","title":"Example","text":"<pre><code>-- @module: user_queries\nselect id, first_name from users where active = true;\n</code></pre>"},{"location":"02_language_guides/terraform/","title":"Terraform Style Guide (with Terragrunt)","text":"<ul> <li>Use <code>snake_case</code> for variables, <code>kebab-case</code> for module directories.</li> <li>Always run <code>terraform fmt -recursive</code>, <code>tflint</code>, and <code>terraform validate</code> in CI.</li> </ul>"},{"location":"02_language_guides/terraform/#example-variable","title":"Example variable","text":"<pre><code>variable \"instance_count\" { type = number description = \"Count\" default = 2 }\n</code></pre>"},{"location":"02_language_guides/terraform/#terragrunt","title":"Terragrunt","text":"<p>See terragrunt.md for live layout and include patterns.</p>"},{"location":"02_language_guides/terragrunt/","title":"Terragrunt Style Guide","text":"<ul> <li>Use <code>live/&lt;env&gt;/&lt;region&gt;/&lt;stack&gt;/terragrunt.hcl</code> pattern.</li> <li>Centralize remote state in top-level <code>terragrunt.hcl</code>.</li> </ul>"},{"location":"02_language_guides/terragrunt/#example","title":"Example","text":"<pre><code># @module: vpc-live\ninclude { path = find_in_parent_folders() }\nterraform { source = \"git::ssh://...//modules//vpc?ref=v1.2.0\" }\ninputs = { name = \"my-vpc\" }\n</code></pre>"},{"location":"02_language_guides/typescript/","title":"TypeScript Style Guide","text":"<ul> <li>Strict ESLint + Prettier + full type safety.</li> <li>Use <code>tsconfig.json</code> with <code>strict: true</code>.</li> </ul>"},{"location":"02_language_guides/typescript/#canonical-example","title":"Canonical example","text":"<pre><code>// @module: util\nexport function sum(a: number, b: number): number { return a + b }\n</code></pre>"},{"location":"02_language_guides/yaml_json_docker/","title":"YAML, JSON, Dockerfile Style Guide","text":"<ul> <li>YAML: strict linting with <code>yamllint</code> and schema validation where applicable.</li> <li>JSON: consistent 2-space indent; optional schema validation.</li> <li>Dockerfile: multi-stage builds, pinned base images, and security scanning.</li> </ul>"},{"location":"03_metadata_schema/schema_reference/","title":"Metadata Schema Reference","text":"<p>Metadata is embedded inline as comment-based tags. Use language-appropriate comment syntax.</p> <p>Common tags:</p> <ul> <li><code>@module: &lt;name&gt;</code></li> <li><code>@vars: name,type,required; name2,type,optional,default=...</code></li> <li><code>@outputs: name,description</code></li> <li><code>@depends_on: path,to,other_module</code></li> <li><code>@env: prod|staging|dev</code></li> </ul> <p>Example (Terraform file header):</p> <pre><code># @module: vpc\n# @vars: name,string,required; cidr,string,optional,default=\"10.0.0.0/16\"\n# @outputs: vpc_id,The ID of the created VPC\n</code></pre>"},{"location":"04_templates/README_template/","title":"Module README Template","text":""},{"location":"04_templates/README_template/#purpose","title":"Purpose","text":"<p>Short description.</p>"},{"location":"04_templates/README_template/#usage","title":"Usage","text":"<pre><code>module \"example\" { source = \"git::ssh://...//modules/example?ref=v1.0.0\" }\n</code></pre>"},{"location":"04_templates/README_template/#inputs","title":"Inputs","text":"Name Type Required Default Description"},{"location":"04_templates/README_template/#outputs","title":"Outputs","text":"Name Description"},{"location":"04_templates/README_template/#examples","title":"Examples","text":"<p>Provide example usage and notes.</p>"},{"location":"05_ci_cd/ai_validation_pipeline/","title":"CI / AI Validation Pipeline","text":"<ul> <li>Steps:</li> <li>Checkout</li> <li>Run pre-commit hooks</li> <li>Run linters and formatters</li> <li>Run metadata validation script</li> <li>Run tests (unit + integration)</li> <li> <p>Terraform/Terragrunt plan (dry run) and attach plan output</p> </li> <li> <p>AI advisory bot runs in PRs commenting style suggestions (advisory only).</p> </li> </ul>"}]}